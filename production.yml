version: '3'

volumes: # 自定义数据卷，位于宿主机/var/lib/docker/volumes内
  project_db_vol: {} # 定义数据卷同步容器内mysql数据
  project_redis_vol: {} # 定义数据卷同步容器内redis数据

services:
  nginx:
    build:
      context: .
      dockerfile: ./compose/production/nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    expose:
      - "80"
    volumes:
      - ./compose/production/nginx/log:/var/log/nginx # 挂载日志
    depends_on:
        - minio
        - django
    restart: always


  redis:
    image: redis:latest
    command: redis-server /etc/redis/redis.conf # 容器启动后启动redis服务器
#    command: redis-server
    container_name: project_redis
    volumes:
      - ./compose/production/redis/redis.conf:/etc/redis/redis.conf # 挂载redis配置文件
      - project_redis_vol:/data # 挂载数据卷
      - ./compose/production/redis/logs:/var/log/redis # 挂载日志
    ports:
      - "6379:6379"
    restart: always # always表容器运行发生错误时一直重启

  db: # 数据库服务的名称
    image: mysql:latest # 指定镜像
    container_name: project_production_mysql # 指定了容器的名称。
    volumes: # 定义了两个数据卷
      - project_db_vol:/var/lib/mysql:rw
      - ./compose/production/mysql/conf/my.cnf:/etc/mysql/my.cnf # 挂载配置文件
    env_file: # 指定了环境变量配置文件的路径。
      - ./.envs/.production/.mysql
    ports: # 指定了端口映射关系。
      - '3306:3306'
    restart: always # 指定了容器的重启策略。
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

  minio:
    image: quay.io/minio/minio:RELEASE.2022-08-02T23-59-16Z
    container_name: project_minio
    volumes:
      - ./compose/production/minio/data:/data
      - ./compose/production/minio/config:/root/.minio
    ports:
      - "9000:9000" # api 端口
      - "9001:9001" # 控制台端口
    env_file:
      - ./.envs/.production/.minIO
    command: server --address ':9000' --console-address ':9001' /data  # 指定容器中的目录 /data
    privileged: true

  django: &django  # &django 定义了一个锚点，*django 引用了这个锚点
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: afan_chat_server_django
    depends_on:
      - db
      - redis
    command: /start

  celeryworker:
    <<: *django
    image: afan_chat_server_celery_worker
    command: /start-celeryworker


